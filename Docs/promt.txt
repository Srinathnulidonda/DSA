provide the complete powerful and advanced frontend code based on the backend/app.py file don't leave anything provide the everything with the real only Beautiful design using Bootstrap 5 and Tailwind CSS
provide the best design for the pc and mobile ui/ux using the advanced bootstrap, tailwind css and etc

Beautiful, production-grade UI/UX for both desktop and mobile.

provide the complete files from the project structure

add Bottom Navigation (Mobile) for mobile only
a modern, responsive, and interactive DSA (Data Structures & Algorithms) Learning Dashboard with the full 14-week timetable, daily schedules, and all resources. web app using HTML5, CSS3, Bootstrap, Tailwind CSS, and JavaScript.

Calendar View: Visualize your learning schedule and completed tasks in a calendar format.
Motivational Widgets: Daily quotes, streak reminders, and achievement popups.

•	Beautiful, production-grade UI/UX for both desktop and mobile.
•	Mobile-only Bottom Navigation bar.
•	Bootstrap 5 + Tailwind CSS together
Stack: Pure HTML5, CSS3, Bootstrap, Tailwind CSS, JavaScript with any framework
Example Resources which should have the direct links in the code


For each week, show a collapsible section with all days, topics, resources, and project links.
Allow users to add custom notes and mark topics as “review needed”.


project structure

dsa-learning-dashboard/
│
├── 📄 index.html                # Main entry file
├── 📄 review.html
├── 📄 search.html
├── 📄 settings.html
├── css/
│   ├── 📄 main.css              # Global styles
│   ├── 📄 components.css        # Component-specific styles
│   ├── 📄 responsive.css        # Responsive design
│   ├── 📄 animations.css        # Animations and transitions
│   └── 📄 theme.css             # Theme (light/dark, colors)
│
├── js/
│   ├── 📄 main.js               #all logics, App initialization, routing, Progress, streaks, leaderboard logic, Pomodoro timer logic, Timetable and calendar logic
│   ├── 📄 api.js                # Firebase 
│   ├── 📄 local-storage.js
│   ├── 📄 authentication.js
│   └── 📄 notes.js              # Notes CRUD and sync logic              
├── components/
│   ├── 📄 navbar.html           # Top navigation bar
│   ├── 📄 sidebar.html          # Sidebar navigation
│   ├── 📄 glossary-modal.html   # DSA Glossary modal
│   ├── 📄 motivational.html     # Motivational widgets (quotes, streaks)
│   ├── 📄 progressbar.html      # Progress bar component
│   ├── 📄 calendar.html         # Calendar view component
│   ├── 📄 leaderboard.html      # (Optional) Leaderboard component
│   └── 📄 pomodoro.html         # (Optional) Pomodoro timer component
├── pages/
│   ├── 📄 dashboard.html        # Main dashboard page
│   ├── 📄 projects.html         # Projects/assignments page
│   ├── 📄 progress.html         # Progress tracking page
│   └── 📄 resources.html        # Resources and practice links page
├── profile/
│   ├── profile.html
│   ├── achievements.html
│   └── preferences.html
├── notes/
│   ├── notes-list.html
│   ├── note-editor.html
│   └── note-search.html
├── auth/
│   ├── login.html
│   ├── register.html
│   └── forgot-password.html
├── roadmap/
│   ├── overview.html
│   ├── week.html
│   └── day.html
│
└── README.md                    # Project overview and instructions


VisuAlgo
USFCA Algorithms Visualizer
LeetCode Explore
GeeksforGeeks DSA
CS Dojo YouTube
Back To Back SWE
mycodeschool
Codeforces
A2OJ ladders
Pramp
Practice Links:

LeetCode Topic-wise
Codeforces Problemset
GeeksforGeeks Practice
Inspiration:

Habitica (gamified progress)
Notion (clean dashboards)
Google Calendar (calendar view)
Deliverables:

A single-page web app (SPA) or multi-page site with all features above.
All code in a public GitHub repo with README.
Demo GIFs/screenshots in the repo.
Stretch Goals:

Add Pomodoro timer for study sessions.
Add export/import for progress data.
Add notifications/reminders (browser notifications).
Design References:

Tailwind UI
Bootstrap Examples
Dribbble DSA Dashboard
Extra:


Here's an improved DSA learning roadmap with practical projects after each major topic:

## 📚 Core Learning Resources

### **Beginner-Friendly Text Resources**
- **W3Schools**: https://www.w3schools.com/dsa/ - Simple DSA explanations with examples
- **JavaTpoint**: https://www.javatpoint.com/data-structure-tutorial - Step-by-step tutorials
- **Programiz**: https://www.programiz.com/dsa - Easy-to-understand concepts
- **TutorialsPoint**: https://www.tutorialspoint.com/data_structures_algorithms/ - Comprehensive tutorials
- **GeeksforGeeks**: https://www.geeksforgeeks.org/data-structures/ - Detailed articles with code

### **Video Resources (Beginner to Advanced)**
- **CS Dojo**: https://www.youtube.com/@CSDojo - Clear explanations with practical examples
- **NeetCode**: https://www.youtube.com/@NeetCode - LeetCode solutions with visual explanations
- **Abdul Bari**: https://www.youtube.com/@abdul_bari - Detailed algorithm analysis
- **mycodeschool**: https://www.youtube.com/@mycodeschool - Data structures fundamentals
- **freeCodeCamp**: https://www.youtube.com/c/Freecodecamp - Long-form comprehensive courses

### **Interactive Learning**
- **Algorithm Visualizations**: https://www.cs.usfca.edu/~galles/visualization/Algorithms.html
- **VisuAlgo**: https://visualgo.net/en - Interactive DSA visualizations
- **Python Tutor**: http://pythontutor.com - Code execution visualization
- **Coding Bat**: https://codingbat.com - Simple coding practice
- **HackerEarth**: https://www.hackerearth.com/practice/ - Beginner-friendly problems

### **Practice Platforms**
- **LeetCode**: https://leetcode.com - Primary problem solving
- **HackerRank**: https://www.hackerrank.com - Structured practice with tutorials
- **Codeforces**: https://codeforces.com - Competitive programming
- **CodeChef**: https://www.codechef.com - Beginner to advanced contests
- **AtCoder**: https://atcoder.jp - Well-structured problem sets

### **Additional Simple Resources by Topic**

#### **Arrays & Strings**
- [W3Schools Arrays](https://www.w3schools.com/dsa/dsa_arrays.php) - Basic operations with examples
- [JavaTpoint Array Tutorial](https://www.javatpoint.com/data-structure-array) - Step-by-step guide
- [Programiz Array Operations](https://www.programiz.com/dsa/array) - Simple explanations
- [TutorialsPoint Strings](https://www.tutorialspoint.com/data_structures_algorithms/string_algorithms.htm)

#### **Linked Lists**  
- [W3Schools Linked Lists](https://www.w3schools.com/dsa/dsa_data_linkedlists.php) - Interactive examples
- [JavaTpoint Complete Guide](https://www.javatpoint.com/singly-linked-list) - All variations covered
- [Programiz Visual Guide](https://www.programiz.com/dsa/linked-list) - Easy to follow

#### **Stacks & Queues**
- [W3Schools Stacks](https://www.w3schools.com/dsa/dsa_data_stacks.php) - LIFO operations
- [W3Schools Queues](https://www.w3schools.com/dsa/dsa_data_queues.php) - FIFO operations  
- [JavaTpoint Stack Applications](https://www.javatpoint.com/data-structure-stack) - Real examples

#### **Trees & BST**
- [W3Schools Trees](https://www.w3schools.com/dsa/dsa_data_trees.php) - Tree fundamentals
- [JavaTpoint BST](https://www.javatpoint.com/binary-search-tree) - Complete BST guide
- [Programiz Tree Operations](https://www.programiz.com/dsa/binary-search-tree) - Clear examples

#### **Graphs**
- [W3Schools Graphs](https://www.w3schools.com/dsa/dsa_data_graphs.php) - Graph basics
- [JavaTpoint Graph Algorithms](https://www.javatpoint.com/graph-theory) - All algorithms
- [TutorialsPoint BFS/DFS](https://www.tutorialspoint.com/data_structures_algorithms/graph_data_structure.htm)

#### **Sorting & Searching**
- [W3Schools Sorting](https://www.w3schools.com/dsa/dsa_algo_bubblesort.php) - All sorting algorithms
- [JavaTpoint Searching](https://www.javatpoint.com/dsa-linear-search) - Search techniques
- [Programiz Sort Comparison](https://www.programiz.com/dsa) - Easy comparisons

#### **Dynamic Programming**
- [W3Schools DP](https://www.w3schools.com/dsa/dsa_algo_dynamic_programming.php) - DP basics
- [JavaTpoint DP Tutorial](https://www.javatpoint.com/dsa-dynamic-programming) - Step-by-step approach
- [TutorialsPoint DP Examples](https://www.tutorialspoint.com/design_and_analysis_of_algorithms/design_and_analysis_of_algorithms_dynamic_programming.htm)

### **WEEK 1: Foundation & Environment**
**Goal**: Set up development environment and basic programming concepts

| Day | Topic | Activities | Best Resources | Time |
|-----|-------|------------|---------------|------|
| Mon | Environment Setup | Install Python/C++, Git, IDE setup | [Python Setup - W3Schools](https://www.w3schools.com/python/python_getstarted.asp), [C++ Setup - JavaTpoint](https://www.javatpoint.com/cpp-tutorial) |  |
| Tue | Basic Syntax | Variables, data types, operators | [Python Syntax - W3Schools](https://www.w3schools.com/python/python_syntax.asp), [C++ Basics - Programiz](https://www.programiz.com/cpp-programming) |  |
| Wed | Input/Output | File I/O, console I/O, formatting | [Python I/O - W3Schools](https://www.w3schools.com/python/python_user_input.asp), [C++ I/O - JavaTpoint](https://www.javatpoint.com/cpp-basic-input-output) |  |
| Thu | Functions | Function definition, parameters, scope | [Python Functions - W3Schools](https://www.w3schools.com/python/python_functions.asp), [C++ Functions - TutorialsPoint](https://www.tutorialspoint.com/cplusplus/cpp_functions.htm) |  |
| Fri | Arrays/Lists Basics | Creation, indexing, basic operations | [Python Lists - W3Schools](https://www.w3schools.com/python/python_lists.asp), [C++ Arrays - Programiz](https://www.programiz.com/cpp-programming/arrays) |  |
| Sat | **Project Start**: Scientific Calculator | Plan features, basic arithmetic | - |  |
| Sun | **Project Complete**: Scientific Calculator | Advanced operations, error handling | - |  |

---

### **WEEK 2: Arrays & String Mastery**
**Goal**: Master array operations and string manipulation

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | Array Operations | Iteration, searching, basic algorithms | [Arrays - W3Schools](https://www.w3schools.com/dsa/dsa_arrays.php), [Array Visualization](https://www.cs.usfca.edu/~galles/visualization/Array.html) |  |
| Tue | Two Pointers Technique | Two Sum, reverse array, palindrome | [Two Pointers - Programiz](https://www.programiz.com/dsa/two-pointers-technique), [NeetCode Video](https://www.youtube.com/watch?v=jzZsG8n2R9A) |  |
| Wed | String Processing | Manipulation, pattern matching basics | [Strings - W3Schools](https://www.w3schools.com/python/python_strings.asp), [String DSA - JavaTpoint](https://www.javatpoint.com/string-in-data-structure) |  |
| Thu | Sliding Window | Maximum subarray, longest substring | [Sliding Window - GeeksforGeeks](https://www.geeksforgeeks.org/window-sliding-technique/), [TutorialsPoint](https://www.tutorialspoint.com/sliding-window-technique) |  |
| Fri | Key Problems | Two Sum, Longest Substring, Valid Palindrome | [W3Schools Practice](https://www.w3schools.com/dsa/dsa_exercises.php), [LeetCode #1](https://leetcode.com/problems/two-sum/) |  |
| Sat | **Project Start**: Text Analyzer | Word count, frequency analysis | - |  |
| Sun | **Project Complete**: Text Analyzer | Pattern detection, statistics | - |  |

---

### **WEEK 3: Linked Lists Deep Dive**
**Goal**: Master linked list operations and applications

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | Linked List Basics | Node structure, traversal | [Linked Lists - W3Schools](https://www.w3schools.com/dsa/dsa_data_linkedlists.php), [JavaTpoint Tutorial](https://www.javatpoint.com/singly-linked-list) |  |
| Tue | Singly Linked Lists | Insert, delete, search operations | [LL Operations - Programiz](https://www.programiz.com/dsa/linked-list), [TutorialsPoint](https://www.tutorialspoint.com/data_structures_algorithms/linked_list_algorithms.htm) |  |
| Wed | Reverse & Manipulation | Reverse list, merge, cycle detection | [Reverse LL - GeeksforGeeks](https://www.geeksforgeeks.org/reverse-a-linked-list/), [W3Schools Examples](https://www.w3schools.com/dsa/dsa_linkedlists_reverse.php) |  |
| Thu | Doubly & Circular Lists | Advanced variations and use cases | [Doubly LL - JavaTpoint](https://www.javatpoint.com/doubly-linked-list), [Circular LL - Programiz](https://www.programiz.com/dsa/circular-linked-list) |  |
| Fri | Key Problems | Reverse, Merge Two Lists, Cycle Detection | [LL Problems - W3Schools](https://www.w3schools.com/dsa/dsa_exercises_linkedlists.php), [LeetCode #206](https://leetcode.com/problems/reverse-linked-list/) |  |
| Sat | **Project Start**: Music Playlist Manager | Song management using linked lists | - |  |
| Sun | **Project Complete**: Music Playlist Manager | Shuffle, repeat, playlist operations | - |  |

---

### **WEEK 4: Stacks & Queues Applications**
**Goal**: Understand LIFO/FIFO operations and real-world applications

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | Stack Fundamentals | LIFO operations, implementation | [Stacks - W3Schools](https://www.w3schools.com/dsa/dsa_data_stacks.php), [JavaTpoint Tutorial](https://www.javatpoint.com/data-structure-stack) |  |
| Tue | Stack Applications | Expression evaluation, parentheses matching | [Stack Applications - Programiz](https://www.programiz.com/dsa/stack), [TutorialsPoint Examples](https://www.tutorialspoint.com/data_structures_algorithms/stack_algorithm.htm) |  |
| Wed | Queue Fundamentals | FIFO operations, circular queues | [Queues - W3Schools](https://www.w3schools.com/dsa/dsa_data_queues.php), [JavaTpoint Queue](https://www.javatpoint.com/data-structure-queue) |  |
| Thu | Advanced Queues | Deque, priority queue introduction | [Deque - GeeksforGeeks](https://www.geeksforgeeks.org/deque-set-1-introduction-applications/), [Priority Queue - Programiz](https://www.programiz.com/dsa/priority-queue) |  |
| Fri | Key Problems | Valid Parentheses, Min Stack | [Stack Problems - W3Schools](https://www.w3schools.com/dsa/dsa_exercises_stacks.php), [LeetCode #20](https://leetcode.com/problems/valid-parentheses/) |  |
| Sat | **Project Start**: Code Editor | Undo/redo functionality using stacks | - |  |
| Sun | **Project Complete**: Code Editor | Bracket matching, syntax validation | - |  |

---

### **WEEK 5: Binary Trees Foundation**
**Goal**: Master tree traversals and basic tree operations

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | Tree Basics | Terminology, node structure | [Trees - W3Schools](https://www.w3schools.com/dsa/dsa_data_trees.php), [Binary Trees - JavaTpoint](https://www.javatpoint.com/binary-tree) |  |
| Tue | Tree Traversals (DFS) | Preorder, inorder, postorder | [Tree Traversal - Programiz](https://www.programiz.com/dsa/tree-traversal), [GeeksforGeeks Examples](https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/) |  |
| Wed | Level Order (BFS) | Breadth-first traversal using queues | [Level Order - TutorialsPoint](https://www.tutorialspoint.com/data_structures_algorithms/tree_traversal.htm), [W3Schools BFS](https://www.w3schools.com/dsa/dsa_algo_graphs_bfs.php) |  |
| Thu | Tree Properties | Height, depth, diameter calculations | [Tree Properties - JavaTpoint](https://www.javatpoint.com/tree-data-structure), [Programiz Tree Operations](https://www.programiz.com/dsa/binary-tree) |  |
| Fri | Key Problems | Max Depth, Same Tree, Symmetric Tree | [Tree Problems - W3Schools](https://www.w3schools.com/dsa/dsa_exercises_trees.php), [LeetCode #104](https://leetcode.com/problems/maximum-depth-of-binary-tree/) |  |
| Sat | **Project Start**: Family Tree | Genealogy tree with traversals | - |  |
| Sun | **Project Complete**: Family Tree | Relationship queries, tree visualization | - |  |

---

### **WEEK 6: Binary Search Trees**
**Goal**: Master BST operations and balanced tree concepts

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | BST Properties | BST invariant, insertion, search | [BST Visualization](https://www.cs.usfca.edu/~galles/visualization/BST.html), [BST - Abdul Bari](https://www.youtube.com/watch?v=pYT9F8_LFTM) |  |
| Tue | BST Operations | Insert, delete, find operations | [BST Operations](https://www.geeksforgeeks.org/binary-search-tree-data-structure/) |  |
| Wed | BST Validation | Validate BST, range checking | [Validate BST - NeetCode](https://www.youtube.com/watch?v=s6ATEkipzow) |  |
| Thu | Balanced Trees | AVL introduction, rotation concepts | [AVL Trees](https://visualgo.net/en/bst) |  |
| Fri | Key Problems | Validate BST, Lowest Common Ancestor | [LeetCode #98](https://leetcode.com/problems/validate-binary-search-tree/), [#235](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/) |  |
| Sat | **Project Start**: Student Database | BST-based student record system | - |  |
| Sun | **Project Complete**: Student Database | Search, grade analysis, reporting | - |  |

---

### **WEEK 7: Heaps & Priority Queues**
**Goal**: Master heap operations and priority-based algorithms

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | Heap Fundamentals | Min/max heap properties, heapify | [Heap Visualization](https://www.cs.usfca.edu/~galles/visualization/Heap.html), [Heap - Abdul Bari](https://www.youtube.com/watch?v=HqPJF2L5h9U) |  |
| Tue | Heap Operations | Insert, extract, build heap | [Heap Operations](https://www.geeksforgeeks.org/binary-heap/) |  |
| Wed | Priority Queue | Implementation using heaps | [Priority Queue](https://docs.python.org/3/library/heapq.html) |  |
| Thu | Heap Applications | Top K elements, median finding | [Top K Problems](https://leetcode.com/problems/kth-largest-element-in-an-array/) |  |
| Fri | Key Problems | Kth Largest, Merge K Lists | [LeetCode #215](https://leetcode.com/problems/kth-largest-element-in-an-array/), [#23](https://leetcode.com/problems/merge-k-sorted-lists/) |  |
| Sat | **Project Start**: Task Scheduler | Priority-based task management | - |  |
| Sun | **Project Complete**: Task Scheduler | Deadline handling, priority queues | - |  |

---

### **WEEK 8: Hashing & Hash Tables**
**Goal**: Master hash-based data structures and fast lookups

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | Hashing Basics | Hash functions, collision handling | [Hash Table Visualization](https://www.cs.usfca.edu/~galles/visualization/OpenHash.html), [Hashing - CS Dojo](https://www.youtube.com/watch?v=shs0KM3wKv8) |  |
| Tue | Hash Table Operations | Insert, search, delete with collisions | [Hash Tables](https://www.geeksforgeeks.org/hashing-data-structure/) |  |
| Wed | Hash Applications | Frequency counting, duplicate detection | [Python Dict](https://docs.python.org/3/tutorial/datastructures.html#dictionaries) |  |
| Thu | Advanced Hashing | Rolling hash, perfect hashing | [Rolling Hash](https://www.geeksforgeeks.org/rolling-hash-to-find-lexicographically-smallest-substring/) |  |
| Fri | Key Problems | Two Sum, Group Anagrams, Valid Anagram | [LeetCode #1](https://leetcode.com/problems/two-sum/), [#49](https://leetcode.com/problems/group-anagrams/) |  |
| Sat | **Project Start**: Spell Checker | Hash-based dictionary and suggestions | - |  |
| Sun | **Project Complete**: Spell Checker | Edit distance, word suggestions | - |  |

---

### **WEEK 9: Graph Fundamentals**
**Goal**: Master graph representations and basic algorithms

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | Graph Basics | Representation, adjacency list/matrix | [Graph Visualization](https://visualgo.net/en/graphds), [Graph Theory - CS Dojo](https://www.youtube.com/watch?v=gXgEDyodOJU) |  |
| Tue | DFS Implementation | Depth-first search, applications | [DFS Visualization](https://www.cs.usfca.edu/~galles/visualization/DFS.html) |  |
| Wed | BFS Implementation | Breadth-first search, shortest path | [BFS Visualization](https://www.cs.usfca.edu/~galles/visualization/BFS.html) |  |
| Thu | Graph Applications | Connected components, cycle detection | [Graph Applications](https://www.geeksforgeeks.org/applications-of-graph-data-structure/) |  |
| Fri | Key Problems | Number of Islands, Clone Graph | [LeetCode #200](https://leetcode.com/problems/number-of-islands/), [#133](https://leetcode.com/problems/clone-graph/) |  |
| Sat | **Project Start**: Social Network | Friend connections using graphs | - |  |
| Sun | **Project Complete**: Social Network | Friend suggestions, mutual connections | - |  |

---

### **WEEK 10: Advanced Graph Algorithms**
**Goal**: Master shortest path and advanced graph algorithms

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | Dijkstra's Algorithm | Shortest path in weighted graphs | [Dijkstra Visualization](https://www.cs.usfca.edu/~galles/visualization/Dijkstra.html), [Dijkstra - Abdul Bari](https://www.youtube.com/watch?v=XB4MIexjvY0) |  |
| Tue | Bellman-Ford | Negative weight handling | [Bellman-Ford](https://visualgo.net/en/sssp) |  |
| Wed | Floyd-Warshall | All-pairs shortest path | [Floyd-Warshall](https://www.geeksforgeeks.org/floyd-warshall-algorithm-dp-16/) |  |
| Thu | MST Algorithms | Kruskal's and Prim's algorithms | [MST Visualization](https://visualgo.net/en/mst) |  |
| Fri | Topological Sort | Ordering in DAGs | [Topological Sort](https://www.geeksforgeeks.org/topological-sorting/) |  |
| Sat | **Project Start**: GPS Navigation | Shortest path finder | - |  |
| Sun | **Project Complete**: GPS Navigation | Route optimization, traffic handling | - |  |

---

### **WEEK 11: Sorting & Searching Mastery**
**Goal**: Master all major sorting algorithms and binary search variations

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | Basic Sorting | Bubble, selection, insertion sort | [Sorting Visualization](https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html) |  |
| Tue | Merge Sort | Divide and conquer approach | [Merge Sort - mycodeschool](https://www.youtube.com/watch?v=JSceec-wEyw) |  |
| Wed | Quick Sort | Partitioning and optimization | [Quick Sort Visualization](https://visualgo.net/en/sorting) |  |
| Thu | Binary Search | Search variations, bounds | [Binary Search - NeetCode](https://www.youtube.com/watch?v=s4DPM8ct1pI) |  |
| Fri | Advanced Searching | Ternary search, exponential search | [Advanced Search](https://www.geeksforgeeks.org/ternary-search/) |  |
| Sat | **Project Start**: Movie Database | Sorting and searching optimization | - |  |
| Sun | **Project Complete**: Movie Database | Multi-criteria sorting, fast queries | - |  |

---

### **WEEK 12: Recursion & Backtracking**
**Goal**: Master recursive problem-solving and backtracking patterns

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | Recursion Basics | Base cases, recursive thinking | [Recursion - CS Dojo](https://www.youtube.com/watch?v=KEEKn7Me-ms) |  |
| Tue | Recursive Patterns | Tree recursion, memoization | [Recursion Patterns](http://pythontutor.com) |  |
| Wed | Backtracking Intro | Template, decision trees | [Backtracking - NeetCode](https://www.youtube.com/watch?v=pfiQ_PS1g8E) |  |
| Thu | Classic Problems | N-Queens, Sudoku solver | [N-Queens Visualization](https://www.cs.usfca.edu/~galles/visualization/RecQueens.html) |  |
| Fri | More Backtracking | Subsets, permutations, combinations | [LeetCode #78](https://leetcode.com/problems/subsets/), [#46](https://leetcode.com/problems/permutations/) |  |
| Sat | **Project Start**: Sudoku Solver | Interactive puzzle solver | - |  |
| Sun | **Project Complete**: Sudoku Solver | Validation, hints, difficulty levels | - |  |

---

### **WEEK 13: Dynamic Programming**
**Goal**: Master DP patterns and optimization problems

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | DP Fundamentals | Memoization vs tabulation | [DP - NeetCode](https://www.youtube.com/watch?v=oBt53YbR9Kk) |  |
| Tue | Classic DP | Fibonacci, climbing stairs, coin change | [DP Patterns](https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns) |  |
| Wed | String DP | LCS, edit distance, palindromes | [String DP](https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/) |  |
| Thu | Knapsack Problems | 0/1 and unbounded knapsack | [Knapsack DP](https://www.youtube.com/watch?v=8LusJS5-AGo) |  |
| Fri | Advanced DP | LIS, maximum subarray, matrix chain | [LeetCode #300](https://leetcode.com/problems/longest-increasing-subsequence/) |  |
| Sat | **Project Start**: Investment Calculator | DP-based financial optimization | - |  |
| Sun | **Project Complete**: Investment Calculator | Portfolio optimization, risk analysis | - |  |

---

### **WEEK 14: Advanced Topics & System Design**
**Goal**: Integrate all concepts into a comprehensive system

| Day | Topic | Activities | Best Resources |  |
|-----|-------|------------|---------------|------|
| Mon | Greedy Algorithms | Activity selection, Huffman coding | [Greedy Algorithms](https://www.geeksforgeeks.org/greedy-algorithms/) |  |
| Tue | Bit Manipulation | Bitwise operations, bit tricks | [Bit Manipulation](https://www.youtube.com/watch?v=NLKQEOgBAnw) |  |
| Wed | Trie Data Structure | Prefix trees, autocomplete | [Trie Visualization](https://www.cs.usfca.edu/~galles/visualization/Trie.html) |  |
| Thu | Union-Find | Disjoint set operations | [Union-Find](https://visualgo.net/en/ufds) |  |
| Fri | System Design Prep | Scalability, data structure choices | [System Design Primer](https://github.com/donnemartin/system-design-primer) |  |
| Sat | **Project Start**: File Compressor | Huffman coding implementation | - |  |
| Sun | **Final Project**: Mini Database | Complete system with all DSA concepts | - |  |

---

## 🏆 Project Portfolio Summary

1. **Scientific Calculator** → Arrays & basic algorithms
2. **Text Analyzer** → String processing & patterns  
3. **Music Playlist Manager** → Linked list operations
4. **Code Editor** → Stack &
 queue applications
5. **Family Tree** → Binary tree traversals
6. **Student Database** → Binary search trees
7. **Task Scheduler** → Heaps & priority queues
8. **Spell Checker** → Hashing & fast lookups
9. **Social Network** → Graph traversals & connectivity
10. **GPS Navigation** → Advanced graph algorithms
11. **Movie Database** → Sorting & searching optimization
12. **Sudoku Solver** → Recursion & backtracking
13. **Investment Calculator** → Dynamic programming
14. **File Compressor** → Greedy algorithms & bit manipulation
15. **Mini Database** → System design with DSA